import { NextRequest, NextResponse } from 'next/server';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const jobId = searchParams.get('jobId');

    if (!jobId) {
      return NextResponse.json(
        { error: 'jobId parameter is required' },
        { status: 400 }
      );
    }

    console.log(`üìä Checking status for job: ${jobId}`);

    // Get job status from Vercel KV
    if (process.env.KV_REST_API_URL && process.env.KV_REST_API_TOKEN) {
      try {
        const response = await fetch(`${process.env.KV_REST_API_URL}/get/${jobId}`, {
          headers: {
            'Authorization': `Bearer ${process.env.KV_REST_API_TOKEN}`,
          }
        });

        if (response.ok) {
          const result = await response.json();
          
          if (result.result) {
            const jobData = JSON.parse(result.result);
            
            return NextResponse.json({
              jobId,
              status: jobData.status,
              data: jobData.data || null,
              updatedAt: jobData.updatedAt,
              ...(jobData.status === 'processing' && {
                step: jobData.data?.step,
                progress: jobData.data?.progress
              })
            });
          }
        }
      } catch (error) {
        console.error('Failed to fetch job status from KV:', error);
      }
    }

    // Fallback: return mock status for development
    if (process.env.NODE_ENV === 'development') {
      console.log('‚ö†Ô∏è Using mock status for development');
      
      // Simulate different states based on jobId
      const mockStatuses = [
        { status: 'pending', data: null },
        { 
          status: 'processing', 
          data: { 
            step: 'Running AI analysis...', 
            progress: 75 
          } 
        },
        {
          status: 'completed',
          data: {
            url: 'https://example.com',
            timestamp: new Date().toISOString(),
            overallScore: 78,
            categories: {
              performance: 85,
              usability: 75,
              conversion: 70,
              accessibility: 80,
              seo: 80
            },
            criticalIssues: [
              {
                title: 'CTA„Éú„Çø„É≥„ÅÆË¶ñË™çÊÄß‰∏çË∂≥',
                description: '„É°„Ç§„É≥„ÅÆCTA„Éú„Çø„É≥„ÅåÁõÆÁ´ã„Åü„Å™„ÅÑËâ≤„Å®„Çµ„Ç§„Ç∫„ÅßÈÖçÁΩÆ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ',
                impact: 'high',
                category: 'Conversion',
                recommendation: '„Çà„ÇäÁõÆÁ´ã„Å§Ëâ≤ÔºàËµ§„ÇÑ„Ç™„É¨„É≥„Ç∏Ôºâ„Çí‰ΩøÁî®„Åó„ÄÅ„Çµ„Ç§„Ç∫„ÇíÂ§ß„Åç„Åè„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'
              },
              {
                title: '„É¢„Éê„Ç§„É´Ë°®Á§∫„ÅÆÂïèÈ°å',
                description: '„É¢„Éê„Ç§„É´„Éá„Éê„Ç§„Çπ„Åß„ÅÆË°®Á§∫„ÅåÊúÄÈÅ©Âåñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ',
                impact: 'medium',
                category: 'Usability',
                recommendation: '„É¨„Çπ„Éù„É≥„Ç∑„Éñ„Éá„Ç∂„Ç§„É≥„ÇíÊîπÂñÑ„Åó„ÄÅ„É¢„Éê„Ç§„É´„Éï„Ç°„Éº„Çπ„Éà„ÅßÊúÄÈÅ©Âåñ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'
              }
            ],
            opportunities: [
              {
                title: 'ÈõªË©±Áï™Âè∑„ÅÆËøΩÂä†',
                description: 'ÈõªË©±„Åß„ÅÆ„ÅäÂïè„ÅÑÂêà„Çè„Åõ„Çí‰øÉÈÄ≤„Åô„Çã„Åü„ÇÅ„ÄÅ„Éò„ÉÉ„ÉÄ„Éº„Å´ÈõªË©±Áï™Âè∑„ÇíÈÖçÁΩÆ„Åó„Åæ„Åó„Çá„ÅÜ„ÄÇ',
                expectedImprovement: '5-10%„ÅÆ„Ç≥„É≥„Éê„Éº„Ç∏„Éß„É≥ÁéáÂêë‰∏ä',
                effort: 'low'
              },
              {
                title: '„ÅäÂÆ¢Êßò„ÅÆÂ£∞„Çª„ÇØ„Ç∑„Éß„É≥ËøΩÂä†',
                description: '„É¶„Éº„Ç∂„Éº„ÅÆ‰ø°È†ºÂ∫¶„ÇíÈ´ò„ÇÅ„Çã„Åü„ÇÅ„ÄÅ„ÅäÂÆ¢Êßò„ÅÆÂ£∞„ÇÑË©ï‰æ°„ÇíËøΩÂä†„Åó„Åæ„Åó„Çá„ÅÜ„ÄÇ',
                expectedImprovement: '10-15%„ÅÆ„Ç≥„É≥„Éê„Éº„Ç∏„Éß„É≥ÁéáÂêë‰∏ä',
                effort: 'medium'
              },
              {
                title: '„ÉÅ„É£„ÉÉ„Éà„Çµ„Éù„Éº„ÉàÂ∞éÂÖ•',
                description: '„É™„Ç¢„É´„Çø„Ç§„É†„Çµ„Éù„Éº„Éà„Åß„É¶„Éº„Ç∂„Éº„ÅÆÁñëÂïè„ÇíÂç≥Â∫ß„Å´Ëß£Ê±∫„Åó„Åæ„Åó„Çá„ÅÜ„ÄÇ',
                expectedImprovement: '15-20%„ÅÆ„Ç≥„É≥„Éê„Éº„Ç∏„Éß„É≥ÁéáÂêë‰∏ä',
                effort: 'high'
              }
            ]
          }
        }
      ];

      // Simple hash to determine mock status
      const hash = jobId.split('').reduce((a, b) => a + b.charCodeAt(0), 0);
      const mockStatus = mockStatuses[hash % mockStatuses.length];

      return NextResponse.json({
        jobId,
        ...mockStatus,
        updatedAt: new Date().toISOString()
      });
    }

    // Job not found
    return NextResponse.json(
      { 
        error: 'Job not found',
        message: 'The specified job ID was not found or has expired'
      },
      { status: 404 }
    );

  } catch (error) {
    console.error('Status API error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

// DELETE endpoint to cancel/delete a job
export async function DELETE(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const jobId = searchParams.get('jobId');

    if (!jobId) {
      return NextResponse.json(
        { error: 'jobId parameter is required' },
        { status: 400 }
      );
    }

    console.log(`üóëÔ∏è Deleting job: ${jobId}`);

    // Delete job from Vercel KV
    if (process.env.KV_REST_API_URL && process.env.KV_REST_API_TOKEN) {
      try {
        await fetch(`${process.env.KV_REST_API_URL}/del/${jobId}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${process.env.KV_REST_API_TOKEN}`,
          }
        });
      } catch (error) {
        console.error('Failed to delete job from KV:', error);
      }
    }

    return NextResponse.json({
      message: 'Job deleted successfully',
      jobId
    });

  } catch (error) {
    console.error('Delete job API error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}